
encoder-calibration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000dd6  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000dd6  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001175  00000000  00000000  00000ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000893  00000000  00000000  0000203e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000589  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00002e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021b  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fd  00000000  00000000  00003227  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000d18  00000d18  00000dcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000368c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.encoder_init 0000002e  00000c52  00000c52  00000d06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.encoder_read_tick 0000001e  00000cd0  00000cd0  00000d84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.encoder_get_accumulated_ticks_left 00000046  00000aea  00000aea  00000b9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.encoder_get_accumulated_ticks_right 00000046  00000b30  00000b30  00000be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_1 0000009e  0000082c  0000082c  000008e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_2 0000009e  000008ca  000008ca  0000097e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.encoder_ticks_right 00000004  00800110  00800110  00000dd6  2**0
                  ALLOC
 21 .bss.encoder_ticks_left 00000004  00800114  00800114  00000dd6  2**0
                  ALLOC
 22 .text.usart_tx 0000000e  00000cee  00000cee  00000da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.usart_rx 0000000e  00000cfc  00000cfc  00000db0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.usart_init 00000022  00000cae  00000cae  00000d62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 00000018  000000ce  000000ce  00000182  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.main    00000072  00000a78  00000a78  00000b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.avrlibc 00000098  00000968  00000968  00000a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.avrlibc 0000002e  00000c80  00000c80  00000d34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc 00000448  000000e6  000000e6  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.avrlibc 00000038  00000b76  00000b76  00000c2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .data         00000006  0080010a  00000d1c  00000dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 32 .text.avrlibc 00000242  0000052e  0000052e  000005e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.avrlibc 00000036  00000be6  00000be6  00000c9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.avrlibc 0000000e  00000d0a  00000d0a  00000dbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.avrlibc 00000078  00000a00  00000a00  00000ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.avrlibc 000000bc  00000770  00000770  00000824  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc.prologue 00000038  00000bae  00000bae  00000c62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.libgcc.prologue 00000036  00000c1c  00000c1c  00000cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 16 04 	jmp	0x82c	; 0x82c <__vector_1>
   8:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__vector_2>
   c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  10:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  14:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  18:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  1c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  20:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  24:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  28:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  2c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  30:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  34:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  38:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  3c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  40:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  44:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  48:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  4c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  50:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  54:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  58:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  5c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  60:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>
  64:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0a       	sbc	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	0a 01       	movw	r0, r20
  70:	10 00       	.word	0x0010	; ????
  72:	0d 1c       	adc	r0, r13
  74:	01 10       	cpse	r0, r1
  76:	01 18       	sub	r0, r1
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 3c 05 	call	0xa78	; 0xa78 <main>
  c6:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00000d18 <__bad_interrupt>:
 d18:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.encoder_init:

00000c52 <encoder_init>:
static volatile long int encoder_ticks_left = 0;
static volatile long int encoder_ticks_right = 0;

void encoder_init(void) {
	
	cli();
 c52:	f8 94       	cli
	
	// Set digital inputs with internal pull-up (unsure if internal pull-up should be used)
	DDRD &= ~(1 << ENCA1);
 c54:	8a b1       	in	r24, 0x0a	; 10
 c56:	8b 7f       	andi	r24, 0xFB	; 251
 c58:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << ENCA1);
 c5a:	8b b1       	in	r24, 0x0b	; 11
 c5c:	84 60       	ori	r24, 0x04	; 4
 c5e:	8b b9       	out	0x0b, r24	; 11
	
	DDRD &= ~(1 << ENCA2);
 c60:	8a b1       	in	r24, 0x0a	; 10
 c62:	87 7f       	andi	r24, 0xF7	; 247
 c64:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << ENCA2);
 c66:	8b b1       	in	r24, 0x0b	; 11
 c68:	88 60       	ori	r24, 0x08	; 8
 c6a:	8b b9       	out	0x0b, r24	; 11
	
	// Rising edge of INT0 and INT1 will generate an interrupt request
	EICRA |= (1 << ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);
 c6c:	e9 e6       	ldi	r30, 0x69	; 105
 c6e:	f0 e0       	ldi	r31, 0x00	; 0
 c70:	80 81       	ld	r24, Z
 c72:	8f 60       	ori	r24, 0x0F	; 15
 c74:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0) | (1 << INT1);
 c76:	8d b3       	in	r24, 0x1d	; 29
 c78:	83 60       	ori	r24, 0x03	; 3
 c7a:	8d bb       	out	0x1d, r24	; 29
	
	// Enable global interrupts
	sei();
 c7c:	78 94       	sei
 c7e:	08 95       	ret

Disassembly of section .text.encoder_read_tick:

00000cd0 <encoder_read_tick>:
	
	
}

int encoder_read_tick(int encoder_pin) {
	if (PIND & (1<<encoder_pin)) {
 cd0:	29 b1       	in	r18, 0x09	; 9
 cd2:	30 e0       	ldi	r19, 0x00	; 0
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <encoder_read_tick+0xa>
 cd6:	35 95       	asr	r19
 cd8:	27 95       	ror	r18
 cda:	8a 95       	dec	r24
 cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <encoder_read_tick+0x6>
 cde:	c9 01       	movw	r24, r18
 ce0:	81 70       	andi	r24, 0x01	; 1
 ce2:	99 27       	eor	r25, r25
 ce4:	20 ff       	sbrs	r18, 0
 ce6:	02 c0       	rjmp	.+4      	; 0xcec <encoder_read_tick+0x1c>
		return 1;
 ce8:	81 e0       	ldi	r24, 0x01	; 1
 cea:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 cec:	08 95       	ret

Disassembly of section .text.encoder_get_accumulated_ticks_left:

00000aea <encoder_get_accumulated_ticks_left>:

long encoder_get_accumulated_ticks_left(void) {
 aea:	cf 93       	push	r28
 aec:	df 93       	push	r29
 aee:	1f 92       	push	r1
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
	long ticks;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 af4:	8f b7       	in	r24, 0x3f	; 63
 af6:	89 83       	std	Y+1, r24	; 0x01
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 af8:	f8 94       	cli
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	09 c0       	rjmp	.+18     	; 0xb10 <encoder_get_accumulated_ticks_left+0x26>
		ticks = encoder_ticks_left;
 afe:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <encoder_ticks_left>
 b02:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <encoder_ticks_left+0x1>
 b06:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <encoder_ticks_left+0x2>
 b0a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <encoder_ticks_left+0x3>
	return 0;
}

long encoder_get_accumulated_ticks_left(void) {
	long ticks;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 b0e:	80 e0       	ldi	r24, 0x00	; 0
 b10:	81 11       	cpse	r24, r1
 b12:	f5 cf       	rjmp	.-22     	; 0xafe <encoder_get_accumulated_ticks_left+0x14>
 b14:	ce 01       	movw	r24, r28
 b16:	01 96       	adiw	r24, 0x01	; 1
 b18:	a0 e8       	ldi	r26, 0x80	; 128
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 b1a:	fc 01       	movw	r30, r24
 b1c:	84 91       	lpm	r24, Z
 b1e:	a7 fd       	sbrc	r26, 7
 b20:	80 81       	ld	r24, Z
 b22:	8f bf       	out	0x3f, r24	; 63
		ticks = encoder_ticks_left;
	}
	return ticks;
}
 b24:	cb 01       	movw	r24, r22
 b26:	ba 01       	movw	r22, r20
 b28:	0f 90       	pop	r0
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	08 95       	ret

Disassembly of section .text.encoder_get_accumulated_ticks_right:

00000b30 <encoder_get_accumulated_ticks_right>:

long encoder_get_accumulated_ticks_right(void) {
 b30:	cf 93       	push	r28
 b32:	df 93       	push	r29
 b34:	1f 92       	push	r1
 b36:	cd b7       	in	r28, 0x3d	; 61
 b38:	de b7       	in	r29, 0x3e	; 62
	long ticks;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 b3a:	8f b7       	in	r24, 0x3f	; 63
 b3c:	89 83       	std	Y+1, r24	; 0x01
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 b3e:	f8 94       	cli
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	09 c0       	rjmp	.+18     	; 0xb56 <encoder_get_accumulated_ticks_right+0x26>
		ticks = encoder_ticks_right;
 b44:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <encoder_ticks_right>
 b48:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <encoder_ticks_right+0x1>
 b4c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <encoder_ticks_right+0x2>
 b50:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <encoder_ticks_right+0x3>
	return ticks;
}

long encoder_get_accumulated_ticks_right(void) {
	long ticks;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	81 11       	cpse	r24, r1
 b58:	f5 cf       	rjmp	.-22     	; 0xb44 <encoder_get_accumulated_ticks_right+0x14>
 b5a:	ce 01       	movw	r24, r28
 b5c:	01 96       	adiw	r24, 0x01	; 1
 b5e:	a0 e8       	ldi	r26, 0x80	; 128
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 b60:	fc 01       	movw	r30, r24
 b62:	84 91       	lpm	r24, Z
 b64:	a7 fd       	sbrc	r26, 7
 b66:	80 81       	ld	r24, Z
 b68:	8f bf       	out	0x3f, r24	; 63
		ticks = encoder_ticks_right;
	}
	return ticks;
}
 b6a:	cb 01       	movw	r24, r22
 b6c:	ba 01       	movw	r22, r20
 b6e:	0f 90       	pop	r0
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	08 95       	ret

Disassembly of section .text.__vector_1:

0000082c <__vector_1>:



// Interrupt service routine for INT0
// Triggered on rising edge of channel A encoder signal for left wheel
ISR(INT0_vect) {
 82c:	1f 92       	push	r1
 82e:	0f 92       	push	r0
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	0f 92       	push	r0
 834:	11 24       	eor	r1, r1
 836:	2f 93       	push	r18
 838:	3f 93       	push	r19
 83a:	4f 93       	push	r20
 83c:	5f 93       	push	r21
 83e:	6f 93       	push	r22
 840:	7f 93       	push	r23
 842:	8f 93       	push	r24
 844:	9f 93       	push	r25
 846:	af 93       	push	r26
 848:	bf 93       	push	r27
 84a:	ef 93       	push	r30
 84c:	ff 93       	push	r31
	int encb1 = encoder_read_tick(ENCB1);
 84e:	84 e0       	ldi	r24, 0x04	; 4
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 68 06 	call	0xcd0	; 0xcd0 <encoder_read_tick>
	if (encb1) {
 856:	89 2b       	or	r24, r25
 858:	a1 f0       	breq	.+40     	; 0x882 <__vector_1+0x56>
		encoder_ticks_left++;
 85a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <encoder_ticks_left>
 85e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <encoder_ticks_left+0x1>
 862:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <encoder_ticks_left+0x2>
 866:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <encoder_ticks_left+0x3>
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	a1 1d       	adc	r26, r1
 86e:	b1 1d       	adc	r27, r1
 870:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <encoder_ticks_left>
 874:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <encoder_ticks_left+0x1>
 878:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <encoder_ticks_left+0x2>
 87c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <encoder_ticks_left+0x3>
 880:	13 c0       	rjmp	.+38     	; 0x8a8 <__vector_1+0x7c>
	} else {
		encoder_ticks_left--;
 882:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <encoder_ticks_left>
 886:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <encoder_ticks_left+0x1>
 88a:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <encoder_ticks_left+0x2>
 88e:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <encoder_ticks_left+0x3>
 892:	01 97       	sbiw	r24, 0x01	; 1
 894:	a1 09       	sbc	r26, r1
 896:	b1 09       	sbc	r27, r1
 898:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <encoder_ticks_left>
 89c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <encoder_ticks_left+0x1>
 8a0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <encoder_ticks_left+0x2>
 8a4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <encoder_ticks_left+0x3>
	}
}
 8a8:	ff 91       	pop	r31
 8aa:	ef 91       	pop	r30
 8ac:	bf 91       	pop	r27
 8ae:	af 91       	pop	r26
 8b0:	9f 91       	pop	r25
 8b2:	8f 91       	pop	r24
 8b4:	7f 91       	pop	r23
 8b6:	6f 91       	pop	r22
 8b8:	5f 91       	pop	r21
 8ba:	4f 91       	pop	r20
 8bc:	3f 91       	pop	r19
 8be:	2f 91       	pop	r18
 8c0:	0f 90       	pop	r0
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	0f 90       	pop	r0
 8c6:	1f 90       	pop	r1
 8c8:	18 95       	reti

Disassembly of section .text.__vector_2:

000008ca <__vector_2>:

// Interrupt service routine for INT1
// Triggered on rising edge of channel A encoder signal for right wheel
ISR(INT1_vect) {
 8ca:	1f 92       	push	r1
 8cc:	0f 92       	push	r0
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	0f 92       	push	r0
 8d2:	11 24       	eor	r1, r1
 8d4:	2f 93       	push	r18
 8d6:	3f 93       	push	r19
 8d8:	4f 93       	push	r20
 8da:	5f 93       	push	r21
 8dc:	6f 93       	push	r22
 8de:	7f 93       	push	r23
 8e0:	8f 93       	push	r24
 8e2:	9f 93       	push	r25
 8e4:	af 93       	push	r26
 8e6:	bf 93       	push	r27
 8e8:	ef 93       	push	r30
 8ea:	ff 93       	push	r31
	int encb2 = encoder_read_tick(ENCB2);
 8ec:	87 e0       	ldi	r24, 0x07	; 7
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <encoder_read_tick>
	if (encb2) {
 8f4:	89 2b       	or	r24, r25
 8f6:	a1 f0       	breq	.+40     	; 0x920 <__stack+0x21>
		encoder_ticks_right++;
 8f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <encoder_ticks_right>
 8fc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <encoder_ticks_right+0x1>
 900:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <encoder_ticks_right+0x2>
 904:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <encoder_ticks_right+0x3>
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	a1 1d       	adc	r26, r1
 90c:	b1 1d       	adc	r27, r1
 90e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <encoder_ticks_right>
 912:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <encoder_ticks_right+0x1>
 916:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <encoder_ticks_right+0x2>
 91a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <encoder_ticks_right+0x3>
 91e:	13 c0       	rjmp	.+38     	; 0x946 <__stack+0x47>
		} 
	else {
		encoder_ticks_right--;
 920:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <encoder_ticks_right>
 924:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <encoder_ticks_right+0x1>
 928:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <encoder_ticks_right+0x2>
 92c:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <encoder_ticks_right+0x3>
 930:	01 97       	sbiw	r24, 0x01	; 1
 932:	a1 09       	sbc	r26, r1
 934:	b1 09       	sbc	r27, r1
 936:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <encoder_ticks_right>
 93a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <encoder_ticks_right+0x1>
 93e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <encoder_ticks_right+0x2>
 942:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <encoder_ticks_right+0x3>
	}
 946:	ff 91       	pop	r31
 948:	ef 91       	pop	r30
 94a:	bf 91       	pop	r27
 94c:	af 91       	pop	r26
 94e:	9f 91       	pop	r25
 950:	8f 91       	pop	r24
 952:	7f 91       	pop	r23
 954:	6f 91       	pop	r22
 956:	5f 91       	pop	r21
 958:	4f 91       	pop	r20
 95a:	3f 91       	pop	r19
 95c:	2f 91       	pop	r18
 95e:	0f 90       	pop	r0
 960:	0f be       	out	0x3f, r0	; 63
 962:	0f 90       	pop	r0
 964:	1f 90       	pop	r1
 966:	18 95       	reti

Disassembly of section .text.usart_tx:

00000cee <usart_tx>:

#include <avr/io.h>
#include "usart.h"

void usart_tx(unsigned char data) {
	while (! (UCSR0A & (1 << UDRE0))) {
 cee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 cf2:	95 ff       	sbrs	r25, 5
 cf4:	fc cf       	rjmp	.-8      	; 0xcee <usart_tx>
		// wait for buffer to empty
	}
	// Place data in buffer
	UDR0 = data;
 cf6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 cfa:	08 95       	ret

Disassembly of section .text.usart_rx:

00000cfc <usart_rx>:
}

unsigned char usart_rx(void) {
	while(!(UCSR0A & (1 << RXC0))) {
 cfc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 d00:	88 23       	and	r24, r24
 d02:	e4 f7       	brge	.-8      	; 0xcfc <usart_rx>
		// Wait for data to be received
	}
	return UDR0;
 d04:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 d08:	08 95       	ret

Disassembly of section .text.usart_init:

00000cae <usart_init>:

void usart_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = ubrr>>8;
 cae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = ubrr;
 cb2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Enable rx and tx
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 cb6:	88 e1       	ldi	r24, 0x18	; 24
 cb8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Set frame format: 8data 2stop bit
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 cbc:	8e e0       	ldi	r24, 0x0E	; 14
 cbe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Use printf for serial communication
	fdevopen(usart_tx, usart_rx);
 cc2:	6e e7       	ldi	r22, 0x7E	; 126
 cc4:	76 e0       	ldi	r23, 0x06	; 6
 cc6:	87 e7       	ldi	r24, 0x77	; 119
 cc8:	96 e0       	ldi	r25, 0x06	; 6
 cca:	0e 94 b4 04 	call	0x968	; 0x968 <fdevopen>
 cce:	08 95       	ret

Disassembly of section .text.main:

00000a78 <main>:
#include "drivers/usart/usart.h"
#include "drivers/encoder/encoder.h"

int main(void) {
	
	usart_init(UBRR);
 a78:	87 e6       	ldi	r24, 0x67	; 103
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 94 57 06 	call	0xcae	; 0xcae <usart_init>
	encoder_init();
 a80:	0e 94 29 06 	call	0xc52	; 0xc52 <encoder_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a84:	2f ef       	ldi	r18, 0xFF	; 255
 a86:	83 ed       	ldi	r24, 0xD3	; 211
 a88:	90 e3       	ldi	r25, 0x30	; 48
 a8a:	21 50       	subi	r18, 0x01	; 1
 a8c:	80 40       	sbci	r24, 0x00	; 0
 a8e:	90 40       	sbci	r25, 0x00	; 0
 a90:	e1 f7       	brne	.-8      	; 0xa8a <main+0x12>
 a92:	00 c0       	rjmp	.+0      	; 0xa94 <main+0x1c>
 a94:	00 00       	nop
	_delay_ms(1000);
	
	while(1) {
		long left = encoder_get_accumulated_ticks_left();
 a96:	0e 94 75 05 	call	0xaea	; 0xaea <encoder_get_accumulated_ticks_left>
 a9a:	c6 2f       	mov	r28, r22
 a9c:	d7 2f       	mov	r29, r23
 a9e:	18 2f       	mov	r17, r24
 aa0:	09 2f       	mov	r16, r25
		long right =  encoder_get_accumulated_ticks_right();
 aa2:	0e 94 98 05 	call	0xb30	; 0xb30 <encoder_get_accumulated_ticks_right>
		printf("left: %ld\t right: %ld\n\r", left, right);
 aa6:	9f 93       	push	r25
 aa8:	8f 93       	push	r24
 aaa:	7f 93       	push	r23
 aac:	6f 93       	push	r22
 aae:	0f 93       	push	r16
 ab0:	1f 93       	push	r17
 ab2:	df 93       	push	r29
 ab4:	cf 93       	push	r28
 ab6:	8e ec       	ldi	r24, 0xCE	; 206
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	a0 e0       	ldi	r26, 0x00	; 0
 abc:	af 93       	push	r26
 abe:	9f 93       	push	r25
 ac0:	8f 93       	push	r24
 ac2:	0e 94 40 06 	call	0xc80	; 0xc80 <printf>
 ac6:	2f ef       	ldi	r18, 0xFF	; 255
 ac8:	81 ee       	ldi	r24, 0xE1	; 225
 aca:	94 e0       	ldi	r25, 0x04	; 4
 acc:	21 50       	subi	r18, 0x01	; 1
 ace:	80 40       	sbci	r24, 0x00	; 0
 ad0:	90 40       	sbci	r25, 0x00	; 0
 ad2:	e1 f7       	brne	.-8      	; 0xacc <main+0x54>
 ad4:	00 c0       	rjmp	.+0      	; 0xad6 <main+0x5e>
 ad6:	00 00       	nop
 ad8:	8d b7       	in	r24, 0x3d	; 61
 ada:	9e b7       	in	r25, 0x3e	; 62
 adc:	0b 96       	adiw	r24, 0x0b	; 11
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	f8 94       	cli
 ae2:	9e bf       	out	0x3e, r25	; 62
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	8d bf       	out	0x3d, r24	; 61
 ae8:	d6 cf       	rjmp	.-84     	; 0xa96 <main+0x1e>

Disassembly of section .text.avrlibc:

00000968 <fdevopen>:
 968:	0f 93       	push	r16
 96a:	1f 93       	push	r17
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	00 97       	sbiw	r24, 0x00	; 0
 972:	31 f4       	brne	.+12     	; 0x980 <fdevopen+0x18>
 974:	61 15       	cp	r22, r1
 976:	71 05       	cpc	r23, r1
 978:	19 f4       	brne	.+6      	; 0x980 <fdevopen+0x18>
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	3b c0       	rjmp	.+118    	; 0x9f6 <fdevopen+0x8e>
 980:	8b 01       	movw	r16, r22
 982:	ec 01       	movw	r28, r24
 984:	6f e0       	ldi	r22, 0x0F	; 15
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	0e 94 bb 05 	call	0xb76	; 0xb76 <calloc>
 990:	fc 01       	movw	r30, r24
 992:	89 2b       	or	r24, r25
 994:	91 f3       	breq	.-28     	; 0x97a <fdevopen+0x12>
 996:	80 e8       	ldi	r24, 0x80	; 128
 998:	84 83       	std	Z+4, r24	; 0x04
 99a:	01 15       	cp	r16, r1
 99c:	11 05       	cpc	r17, r1
 99e:	69 f0       	breq	.+26     	; 0x9ba <fdevopen+0x52>
 9a0:	14 87       	std	Z+12, r17	; 0x0c
 9a2:	03 87       	std	Z+11, r16	; 0x0b
 9a4:	81 e8       	ldi	r24, 0x81	; 129
 9a6:	84 83       	std	Z+4, r24	; 0x04
 9a8:	a0 e0       	ldi	r26, 0x00	; 0
 9aa:	b1 e0       	ldi	r27, 0x01	; 1
 9ac:	8d 91       	ld	r24, X+
 9ae:	9c 91       	ld	r25, X
 9b0:	11 97       	sbiw	r26, 0x01	; 1
 9b2:	89 2b       	or	r24, r25
 9b4:	11 f4       	brne	.+4      	; 0x9ba <fdevopen+0x52>
 9b6:	ed 93       	st	X+, r30
 9b8:	fc 93       	st	X, r31
 9ba:	20 97       	sbiw	r28, 0x00	; 0
 9bc:	d9 f0       	breq	.+54     	; 0x9f4 <fdevopen+0x8c>
 9be:	d2 87       	std	Z+10, r29	; 0x0a
 9c0:	c1 87       	std	Z+9, r28	; 0x09
 9c2:	84 81       	ldd	r24, Z+4	; 0x04
 9c4:	82 60       	ori	r24, 0x02	; 2
 9c6:	84 83       	std	Z+4, r24	; 0x04
 9c8:	a0 e0       	ldi	r26, 0x00	; 0
 9ca:	b1 e0       	ldi	r27, 0x01	; 1
 9cc:	12 96       	adiw	r26, 0x02	; 2
 9ce:	8d 91       	ld	r24, X+
 9d0:	9c 91       	ld	r25, X
 9d2:	13 97       	sbiw	r26, 0x03	; 3
 9d4:	89 2b       	or	r24, r25
 9d6:	71 f4       	brne	.+28     	; 0x9f4 <fdevopen+0x8c>
 9d8:	13 96       	adiw	r26, 0x03	; 3
 9da:	fc 93       	st	X, r31
 9dc:	ee 93       	st	-X, r30
 9de:	12 97       	sbiw	r26, 0x02	; 2
 9e0:	14 96       	adiw	r26, 0x04	; 4
 9e2:	8d 91       	ld	r24, X+
 9e4:	9c 91       	ld	r25, X
 9e6:	15 97       	sbiw	r26, 0x05	; 5
 9e8:	89 2b       	or	r24, r25
 9ea:	21 f4       	brne	.+8      	; 0x9f4 <fdevopen+0x8c>
 9ec:	15 96       	adiw	r26, 0x05	; 5
 9ee:	fc 93       	st	X, r31
 9f0:	ee 93       	st	-X, r30
 9f2:	14 97       	sbiw	r26, 0x04	; 4
 9f4:	cf 01       	movw	r24, r30
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	1f 91       	pop	r17
 9fc:	0f 91       	pop	r16
 9fe:	08 95       	ret

Disassembly of section .text.avrlibc:

00000c80 <printf>:
 c80:	a0 e0       	ldi	r26, 0x00	; 0
 c82:	b0 e0       	ldi	r27, 0x00	; 0
 c84:	e6 e4       	ldi	r30, 0x46	; 70
 c86:	f6 e0       	ldi	r31, 0x06	; 6
 c88:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__prologue_saves__+0x20>
 c8c:	9e 01       	movw	r18, r28
 c8e:	2b 5f       	subi	r18, 0xFB	; 251
 c90:	3f 4f       	sbci	r19, 0xFF	; 255
 c92:	f9 01       	movw	r30, r18
 c94:	41 91       	ld	r20, Z+
 c96:	51 91       	ld	r21, Z+
 c98:	61 91       	ld	r22, Z+
 c9a:	9f 01       	movw	r18, r30
 c9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 ca0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 ca4:	0e 94 73 00 	call	0xe6	; 0xe6 <vfprintf>
 ca8:	e2 e0       	ldi	r30, 0x02	; 2
 caa:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__epilogue_restores__+0x20>

Disassembly of section .text.avrlibc:

000000e6 <vfprintf>:
  e6:	2f 92       	push	r2
  e8:	3f 92       	push	r3
  ea:	4f 92       	push	r4
  ec:	6f 92       	push	r6
  ee:	7f 92       	push	r7
  f0:	8f 92       	push	r8
  f2:	9f 92       	push	r9
  f4:	af 92       	push	r10
  f6:	bf 92       	push	r11
  f8:	cf 92       	push	r12
  fa:	df 92       	push	r13
  fc:	ef 92       	push	r14
  fe:	ff 92       	push	r15
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	62 97       	sbiw	r28, 0x12	; 18
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	6c 01       	movw	r12, r24
 11a:	3a 01       	movw	r6, r20
 11c:	86 2e       	mov	r8, r22
 11e:	79 01       	movw	r14, r18
 120:	fc 01       	movw	r30, r24
 122:	10 86       	std	Z+8, r1	; 0x08
 124:	17 82       	std	Z+7, r1	; 0x07
 126:	84 81       	ldd	r24, Z+4	; 0x04
 128:	81 ff       	sbrs	r24, 1
 12a:	e7 c1       	rjmp	.+974    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 12c:	9e 01       	movw	r18, r28
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	3d 87       	std	Y+13, r19	; 0x0d
 134:	2c 87       	std	Y+12, r18	; 0x0c
 136:	c9 01       	movw	r24, r18
 138:	a0 e8       	ldi	r26, 0x80	; 128
 13a:	88 8b       	std	Y+16, r24	; 0x10
 13c:	99 8b       	std	Y+17, r25	; 0x11
 13e:	aa 8b       	std	Y+18, r26	; 0x12
 140:	9f e3       	ldi	r25, 0x3F	; 63
 142:	99 2e       	mov	r9, r25
 144:	f3 01       	movw	r30, r6
 146:	84 91       	lpm	r24, Z
 148:	87 fc       	sbrc	r8, 7
 14a:	80 81       	ld	r24, Z
 14c:	88 23       	and	r24, r24
 14e:	09 f4       	brne	.+2      	; 0x152 <vfprintf+0x6c>
 150:	d0 c1       	rjmp	.+928    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 152:	48 2d       	mov	r20, r8
 154:	93 01       	movw	r18, r6
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	4f 4f       	sbci	r20, 0xFF	; 255
 15c:	85 32       	cpi	r24, 0x25	; 37
 15e:	19 f0       	breq	.+6      	; 0x166 <vfprintf+0x80>
 160:	39 01       	movw	r6, r18
 162:	84 2e       	mov	r8, r20
 164:	0a c0       	rjmp	.+20     	; 0x17a <vfprintf+0x94>
 166:	f9 01       	movw	r30, r18
 168:	84 91       	lpm	r24, Z
 16a:	47 fd       	sbrc	r20, 7
 16c:	80 81       	ld	r24, Z
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	69 0e       	add	r6, r25
 172:	71 1c       	adc	r7, r1
 174:	81 1c       	adc	r8, r1
 176:	85 32       	cpi	r24, 0x25	; 37
 178:	29 f4       	brne	.+10     	; 0x184 <vfprintf+0x9e>
 17a:	b6 01       	movw	r22, r12
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 182:	e0 cf       	rjmp	.-64     	; 0x144 <vfprintf+0x5e>
 184:	b1 2c       	mov	r11, r1
 186:	00 e0       	ldi	r16, 0x00	; 0
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	10 32       	cpi	r17, 0x20	; 32
 18c:	a0 f4       	brcc	.+40     	; 0x1b6 <vfprintf+0xd0>
 18e:	8b 32       	cpi	r24, 0x2B	; 43
 190:	69 f0       	breq	.+26     	; 0x1ac <vfprintf+0xc6>
 192:	30 f4       	brcc	.+12     	; 0x1a0 <vfprintf+0xba>
 194:	80 32       	cpi	r24, 0x20	; 32
 196:	59 f0       	breq	.+22     	; 0x1ae <vfprintf+0xc8>
 198:	83 32       	cpi	r24, 0x23	; 35
 19a:	69 f4       	brne	.+26     	; 0x1b6 <vfprintf+0xd0>
 19c:	10 61       	ori	r17, 0x10	; 16
 19e:	2c c0       	rjmp	.+88     	; 0x1f8 <vfprintf+0x112>
 1a0:	8d 32       	cpi	r24, 0x2D	; 45
 1a2:	39 f0       	breq	.+14     	; 0x1b2 <vfprintf+0xcc>
 1a4:	80 33       	cpi	r24, 0x30	; 48
 1a6:	39 f4       	brne	.+14     	; 0x1b6 <vfprintf+0xd0>
 1a8:	11 60       	ori	r17, 0x01	; 1
 1aa:	26 c0       	rjmp	.+76     	; 0x1f8 <vfprintf+0x112>
 1ac:	12 60       	ori	r17, 0x02	; 2
 1ae:	14 60       	ori	r17, 0x04	; 4
 1b0:	23 c0       	rjmp	.+70     	; 0x1f8 <vfprintf+0x112>
 1b2:	18 60       	ori	r17, 0x08	; 8
 1b4:	21 c0       	rjmp	.+66     	; 0x1f8 <vfprintf+0x112>
 1b6:	17 fd       	sbrc	r17, 7
 1b8:	29 c0       	rjmp	.+82     	; 0x20c <vfprintf+0x126>
 1ba:	90 ed       	ldi	r25, 0xD0	; 208
 1bc:	98 0f       	add	r25, r24
 1be:	9a 30       	cpi	r25, 0x0A	; 10
 1c0:	78 f4       	brcc	.+30     	; 0x1e0 <vfprintf+0xfa>
 1c2:	16 ff       	sbrs	r17, 6
 1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <vfprintf+0xec>
 1c6:	aa e0       	ldi	r26, 0x0A	; 10
 1c8:	ba 9e       	mul	r11, r26
 1ca:	90 0d       	add	r25, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	b9 2e       	mov	r11, r25
 1d0:	13 c0       	rjmp	.+38     	; 0x1f8 <vfprintf+0x112>
 1d2:	ea e0       	ldi	r30, 0x0A	; 10
 1d4:	0e 9f       	mul	r16, r30
 1d6:	90 0d       	add	r25, r0
 1d8:	11 24       	eor	r1, r1
 1da:	09 2f       	mov	r16, r25
 1dc:	10 62       	ori	r17, 0x20	; 32
 1de:	0c c0       	rjmp	.+24     	; 0x1f8 <vfprintf+0x112>
 1e0:	8e 32       	cpi	r24, 0x2E	; 46
 1e2:	21 f4       	brne	.+8      	; 0x1ec <vfprintf+0x106>
 1e4:	16 fd       	sbrc	r17, 6
 1e6:	85 c1       	rjmp	.+778    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 1e8:	10 64       	ori	r17, 0x40	; 64
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <vfprintf+0x112>
 1ec:	8c 36       	cpi	r24, 0x6C	; 108
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <vfprintf+0x10e>
 1f0:	10 68       	ori	r17, 0x80	; 128
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <vfprintf+0x112>
 1f4:	88 36       	cpi	r24, 0x68	; 104
 1f6:	51 f4       	brne	.+20     	; 0x20c <vfprintf+0x126>
 1f8:	f3 01       	movw	r30, r6
 1fa:	84 91       	lpm	r24, Z
 1fc:	87 fc       	sbrc	r8, 7
 1fe:	80 81       	ld	r24, Z
 200:	ff ef       	ldi	r31, 0xFF	; 255
 202:	6f 1a       	sub	r6, r31
 204:	7f 0a       	sbc	r7, r31
 206:	8f 0a       	sbc	r8, r31
 208:	81 11       	cpse	r24, r1
 20a:	bf cf       	rjmp	.-130    	; 0x18a <vfprintf+0xa4>
 20c:	98 2f       	mov	r25, r24
 20e:	9f 7d       	andi	r25, 0xDF	; 223
 210:	95 54       	subi	r25, 0x45	; 69
 212:	93 30       	cpi	r25, 0x03	; 3
 214:	28 f4       	brcc	.+10     	; 0x220 <vfprintf+0x13a>
 216:	24 e0       	ldi	r18, 0x04	; 4
 218:	e2 0e       	add	r14, r18
 21a:	f1 1c       	adc	r15, r1
 21c:	99 82       	std	Y+1, r9	; 0x01
 21e:	0f c0       	rjmp	.+30     	; 0x23e <vfprintf+0x158>
 220:	83 36       	cpi	r24, 0x63	; 99
 222:	31 f0       	breq	.+12     	; 0x230 <vfprintf+0x14a>
 224:	83 37       	cpi	r24, 0x73	; 115
 226:	91 f0       	breq	.+36     	; 0x24c <vfprintf+0x166>
 228:	83 35       	cpi	r24, 0x53	; 83
 22a:	09 f0       	breq	.+2      	; 0x22e <vfprintf+0x148>
 22c:	63 c0       	rjmp	.+198    	; 0x2f4 <vfprintf+0x20e>
 22e:	27 c0       	rjmp	.+78     	; 0x27e <vfprintf+0x198>
 230:	f7 01       	movw	r30, r14
 232:	80 81       	ld	r24, Z
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	97 01       	movw	r18, r14
 238:	2e 5f       	subi	r18, 0xFE	; 254
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
 23c:	79 01       	movw	r14, r18
 23e:	28 88       	ldd	r2, Y+16	; 0x10
 240:	39 88       	ldd	r3, Y+17	; 0x11
 242:	4a 88       	ldd	r4, Y+18	; 0x12
 244:	aa 24       	eor	r10, r10
 246:	a3 94       	inc	r10
 248:	b1 2c       	mov	r11, r1
 24a:	17 c0       	rjmp	.+46     	; 0x27a <vfprintf+0x194>
 24c:	a7 01       	movw	r20, r14
 24e:	4d 5f       	subi	r20, 0xFD	; 253
 250:	5f 4f       	sbci	r21, 0xFF	; 255
 252:	5f 87       	std	Y+15, r21	; 0x0f
 254:	4e 87       	std	Y+14, r20	; 0x0e
 256:	f7 01       	movw	r30, r14
 258:	20 80       	ld	r2, Z
 25a:	31 80       	ldd	r3, Z+1	; 0x01
 25c:	42 80       	ldd	r4, Z+2	; 0x02
 25e:	16 ff       	sbrs	r17, 6
 260:	03 c0       	rjmp	.+6      	; 0x268 <vfprintf+0x182>
 262:	4b 2d       	mov	r20, r11
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <vfprintf+0x186>
 268:	4f ef       	ldi	r20, 0xFF	; 255
 26a:	5f ef       	ldi	r21, 0xFF	; 255
 26c:	84 2d       	mov	r24, r4
 26e:	b1 01       	movw	r22, r2
 270:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <strnlen>
 274:	5c 01       	movw	r10, r24
 276:	ee 84       	ldd	r14, Y+14	; 0x0e
 278:	ff 84       	ldd	r15, Y+15	; 0x0f
 27a:	1f 77       	andi	r17, 0x7F	; 127
 27c:	18 c0       	rjmp	.+48     	; 0x2ae <vfprintf+0x1c8>
 27e:	97 01       	movw	r18, r14
 280:	2d 5f       	subi	r18, 0xFD	; 253
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	3f 87       	std	Y+15, r19	; 0x0f
 286:	2e 87       	std	Y+14, r18	; 0x0e
 288:	f7 01       	movw	r30, r14
 28a:	20 80       	ld	r2, Z
 28c:	31 80       	ldd	r3, Z+1	; 0x01
 28e:	42 80       	ldd	r4, Z+2	; 0x02
 290:	16 ff       	sbrs	r17, 6
 292:	03 c0       	rjmp	.+6      	; 0x29a <vfprintf+0x1b4>
 294:	4b 2d       	mov	r20, r11
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <vfprintf+0x1b8>
 29a:	4f ef       	ldi	r20, 0xFF	; 255
 29c:	5f ef       	ldi	r21, 0xFF	; 255
 29e:	84 2d       	mov	r24, r4
 2a0:	b1 01       	movw	r22, r2
 2a2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <strnlen>
 2a6:	5c 01       	movw	r10, r24
 2a8:	10 68       	ori	r17, 0x80	; 128
 2aa:	ee 84       	ldd	r14, Y+14	; 0x0e
 2ac:	ff 84       	ldd	r15, Y+15	; 0x0f
 2ae:	13 fd       	sbrc	r17, 3
 2b0:	1d c0       	rjmp	.+58     	; 0x2ec <vfprintf+0x206>
 2b2:	80 2f       	mov	r24, r16
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	a8 16       	cp	r10, r24
 2b8:	b9 06       	cpc	r11, r25
 2ba:	c0 f4       	brcc	.+48     	; 0x2ec <vfprintf+0x206>
 2bc:	b6 01       	movw	r22, r12
 2be:	80 e2       	ldi	r24, 0x20	; 32
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 2c6:	01 50       	subi	r16, 0x01	; 1
 2c8:	f4 cf       	rjmp	.-24     	; 0x2b2 <vfprintf+0x1cc>
 2ca:	f1 01       	movw	r30, r2
 2cc:	84 91       	lpm	r24, Z
 2ce:	47 fc       	sbrc	r4, 7
 2d0:	80 81       	ld	r24, Z
 2d2:	ff ef       	ldi	r31, 0xFF	; 255
 2d4:	2f 1a       	sub	r2, r31
 2d6:	3f 0a       	sbc	r3, r31
 2d8:	4f 0a       	sbc	r4, r31
 2da:	b6 01       	movw	r22, r12
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 2e2:	01 11       	cpse	r16, r1
 2e4:	01 50       	subi	r16, 0x01	; 1
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	a2 1a       	sub	r10, r18
 2ea:	b1 08       	sbc	r11, r1
 2ec:	a1 14       	cp	r10, r1
 2ee:	b1 04       	cpc	r11, r1
 2f0:	61 f7       	brne	.-40     	; 0x2ca <vfprintf+0x1e4>
 2f2:	f5 c0       	rjmp	.+490    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 2f4:	84 36       	cpi	r24, 0x64	; 100
 2f6:	11 f0       	breq	.+4      	; 0x2fc <vfprintf+0x216>
 2f8:	89 36       	cpi	r24, 0x69	; 105
 2fa:	71 f5       	brne	.+92     	; 0x358 <vfprintf+0x272>
 2fc:	f7 01       	movw	r30, r14
 2fe:	17 ff       	sbrs	r17, 7
 300:	08 c0       	rjmp	.+16     	; 0x312 <vfprintf+0x22c>
 302:	60 81       	ld	r22, Z
 304:	71 81       	ldd	r23, Z+1	; 0x01
 306:	82 81       	ldd	r24, Z+2	; 0x02
 308:	93 81       	ldd	r25, Z+3	; 0x03
 30a:	97 01       	movw	r18, r14
 30c:	2c 5f       	subi	r18, 0xFC	; 252
 30e:	3f 4f       	sbci	r19, 0xFF	; 255
 310:	09 c0       	rjmp	.+18     	; 0x324 <vfprintf+0x23e>
 312:	60 81       	ld	r22, Z
 314:	71 81       	ldd	r23, Z+1	; 0x01
 316:	07 2e       	mov	r0, r23
 318:	00 0c       	add	r0, r0
 31a:	88 0b       	sbc	r24, r24
 31c:	99 0b       	sbc	r25, r25
 31e:	97 01       	movw	r18, r14
 320:	2e 5f       	subi	r18, 0xFE	; 254
 322:	3f 4f       	sbci	r19, 0xFF	; 255
 324:	79 01       	movw	r14, r18
 326:	1f 76       	andi	r17, 0x6F	; 111
 328:	31 2e       	mov	r3, r17
 32a:	97 ff       	sbrs	r25, 7
 32c:	0a c0       	rjmp	.+20     	; 0x342 <vfprintf+0x25c>
 32e:	90 95       	com	r25
 330:	80 95       	com	r24
 332:	70 95       	com	r23
 334:	61 95       	neg	r22
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	8f 4f       	sbci	r24, 0xFF	; 255
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	31 2f       	mov	r19, r17
 33e:	30 68       	ori	r19, 0x80	; 128
 340:	33 2e       	mov	r3, r19
 342:	2a e0       	ldi	r18, 0x0A	; 10
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	ae 01       	movw	r20, r28
 348:	4f 5f       	subi	r20, 0xFF	; 255
 34a:	5f 4f       	sbci	r21, 0xFF	; 255
 34c:	0e 94 b8 03 	call	0x770	; 0x770 <__ultoa_invert>
 350:	48 2e       	mov	r4, r24
 352:	4c 85       	ldd	r20, Y+12	; 0x0c
 354:	44 1a       	sub	r4, r20
 356:	4a c0       	rjmp	.+148    	; 0x3ec <vfprintf+0x306>
 358:	85 37       	cpi	r24, 0x75	; 117
 35a:	29 f4       	brne	.+10     	; 0x366 <vfprintf+0x280>
 35c:	1f 7e       	andi	r17, 0xEF	; 239
 35e:	a1 2e       	mov	r10, r17
 360:	2a e0       	ldi	r18, 0x0A	; 10
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	25 c0       	rjmp	.+74     	; 0x3b0 <vfprintf+0x2ca>
 366:	51 2f       	mov	r21, r17
 368:	59 7f       	andi	r21, 0xF9	; 249
 36a:	a5 2e       	mov	r10, r21
 36c:	8f 36       	cpi	r24, 0x6F	; 111
 36e:	c1 f0       	breq	.+48     	; 0x3a0 <vfprintf+0x2ba>
 370:	18 f4       	brcc	.+6      	; 0x378 <vfprintf+0x292>
 372:	88 35       	cpi	r24, 0x58	; 88
 374:	79 f0       	breq	.+30     	; 0x394 <vfprintf+0x2ae>
 376:	bd c0       	rjmp	.+378    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 378:	80 37       	cpi	r24, 0x70	; 112
 37a:	19 f0       	breq	.+6      	; 0x382 <vfprintf+0x29c>
 37c:	88 37       	cpi	r24, 0x78	; 120
 37e:	21 f0       	breq	.+8      	; 0x388 <vfprintf+0x2a2>
 380:	b8 c0       	rjmp	.+368    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 382:	85 2f       	mov	r24, r21
 384:	80 61       	ori	r24, 0x10	; 16
 386:	a8 2e       	mov	r10, r24
 388:	a4 fe       	sbrs	r10, 4
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <vfprintf+0x2c0>
 38c:	9a 2d       	mov	r25, r10
 38e:	94 60       	ori	r25, 0x04	; 4
 390:	a9 2e       	mov	r10, r25
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <vfprintf+0x2c0>
 394:	14 ff       	sbrs	r17, 4
 396:	0a c0       	rjmp	.+20     	; 0x3ac <vfprintf+0x2c6>
 398:	a5 2f       	mov	r26, r21
 39a:	a6 60       	ori	r26, 0x06	; 6
 39c:	aa 2e       	mov	r10, r26
 39e:	06 c0       	rjmp	.+12     	; 0x3ac <vfprintf+0x2c6>
 3a0:	28 e0       	ldi	r18, 0x08	; 8
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <vfprintf+0x2ca>
 3a6:	20 e1       	ldi	r18, 0x10	; 16
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <vfprintf+0x2ca>
 3ac:	20 e1       	ldi	r18, 0x10	; 16
 3ae:	32 e0       	ldi	r19, 0x02	; 2
 3b0:	f7 01       	movw	r30, r14
 3b2:	a7 fe       	sbrs	r10, 7
 3b4:	08 c0       	rjmp	.+16     	; 0x3c6 <vfprintf+0x2e0>
 3b6:	60 81       	ld	r22, Z
 3b8:	71 81       	ldd	r23, Z+1	; 0x01
 3ba:	82 81       	ldd	r24, Z+2	; 0x02
 3bc:	93 81       	ldd	r25, Z+3	; 0x03
 3be:	a7 01       	movw	r20, r14
 3c0:	4c 5f       	subi	r20, 0xFC	; 252
 3c2:	5f 4f       	sbci	r21, 0xFF	; 255
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <vfprintf+0x2ee>
 3c6:	60 81       	ld	r22, Z
 3c8:	71 81       	ldd	r23, Z+1	; 0x01
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	a7 01       	movw	r20, r14
 3d0:	4e 5f       	subi	r20, 0xFE	; 254
 3d2:	5f 4f       	sbci	r21, 0xFF	; 255
 3d4:	7a 01       	movw	r14, r20
 3d6:	ae 01       	movw	r20, r28
 3d8:	4f 5f       	subi	r20, 0xFF	; 255
 3da:	5f 4f       	sbci	r21, 0xFF	; 255
 3dc:	0e 94 b8 03 	call	0x770	; 0x770 <__ultoa_invert>
 3e0:	48 2e       	mov	r4, r24
 3e2:	5c 85       	ldd	r21, Y+12	; 0x0c
 3e4:	45 1a       	sub	r4, r21
 3e6:	8a 2d       	mov	r24, r10
 3e8:	8f 77       	andi	r24, 0x7F	; 127
 3ea:	38 2e       	mov	r3, r24
 3ec:	36 fe       	sbrs	r3, 6
 3ee:	0d c0       	rjmp	.+26     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3f0:	93 2d       	mov	r25, r3
 3f2:	9e 7f       	andi	r25, 0xFE	; 254
 3f4:	a9 2e       	mov	r10, r25
 3f6:	4b 14       	cp	r4, r11
 3f8:	58 f4       	brcc	.+22     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3fa:	34 fe       	sbrs	r3, 4
 3fc:	0b c0       	rjmp	.+22     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3fe:	32 fc       	sbrc	r3, 2
 400:	09 c0       	rjmp	.+18     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 402:	a3 2d       	mov	r26, r3
 404:	ae 7e       	andi	r26, 0xEE	; 238
 406:	aa 2e       	mov	r10, r26
 408:	05 c0       	rjmp	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40a:	14 2d       	mov	r17, r4
 40c:	a3 2c       	mov	r10, r3
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 410:	14 2d       	mov	r17, r4
 412:	01 c0       	rjmp	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	1b 2d       	mov	r17, r11
 416:	a4 fe       	sbrs	r10, 4
 418:	0e c0       	rjmp	.+28     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41a:	fe 01       	movw	r30, r28
 41c:	e4 0d       	add	r30, r4
 41e:	f1 1d       	adc	r31, r1
 420:	80 81       	ld	r24, Z
 422:	80 33       	cpi	r24, 0x30	; 48
 424:	21 f4       	brne	.+8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 426:	ea 2d       	mov	r30, r10
 428:	e9 7e       	andi	r30, 0xE9	; 233
 42a:	ae 2e       	mov	r10, r30
 42c:	08 c0       	rjmp	.+16     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 42e:	a2 fe       	sbrs	r10, 2
 430:	05 c0       	rjmp	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 432:	1e 5f       	subi	r17, 0xFE	; 254
 434:	04 c0       	rjmp	.+8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 436:	8a 2d       	mov	r24, r10
 438:	86 78       	andi	r24, 0x86	; 134
 43a:	09 f0       	breq	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43c:	1f 5f       	subi	r17, 0xFF	; 255
 43e:	a3 fc       	sbrc	r10, 3
 440:	11 c0       	rjmp	.+34     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 442:	a0 fe       	sbrs	r10, 0
 444:	06 c0       	rjmp	.+12     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 446:	10 17       	cp	r17, r16
 448:	88 f4       	brcc	.+34     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 44a:	04 0d       	add	r16, r4
 44c:	b0 2e       	mov	r11, r16
 44e:	b1 1a       	sub	r11, r17
 450:	0e c0       	rjmp	.+28     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 452:	10 17       	cp	r17, r16
 454:	60 f4       	brcc	.+24     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 456:	b6 01       	movw	r22, r12
 458:	80 e2       	ldi	r24, 0x20	; 32
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 460:	1f 5f       	subi	r17, 0xFF	; 255
 462:	f7 cf       	rjmp	.-18     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 464:	10 17       	cp	r17, r16
 466:	18 f4       	brcc	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 468:	01 1b       	sub	r16, r17
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	b4 2c       	mov	r11, r4
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	a4 fe       	sbrs	r10, 4
 472:	10 c0       	rjmp	.+32     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 474:	b6 01       	movw	r22, r12
 476:	80 e3       	ldi	r24, 0x30	; 48
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 47e:	a2 fe       	sbrs	r10, 2
 480:	17 c0       	rjmp	.+46     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 482:	a1 fc       	sbrc	r10, 1
 484:	03 c0       	rjmp	.+6      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 486:	88 e7       	ldi	r24, 0x78	; 120
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48c:	88 e5       	ldi	r24, 0x58	; 88
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	b6 01       	movw	r22, r12
 492:	0c c0       	rjmp	.+24     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 494:	8a 2d       	mov	r24, r10
 496:	86 78       	andi	r24, 0x86	; 134
 498:	59 f0       	breq	.+22     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 49a:	a1 fe       	sbrs	r10, 1
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	8b e2       	ldi	r24, 0x2B	; 43
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a2:	80 e2       	ldi	r24, 0x20	; 32
 4a4:	a7 fc       	sbrc	r10, 7
 4a6:	8d e2       	ldi	r24, 0x2D	; 45
 4a8:	b6 01       	movw	r22, r12
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 4b0:	4b 14       	cp	r4, r11
 4b2:	38 f4       	brcc	.+14     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4b4:	b6 01       	movw	r22, r12
 4b6:	80 e3       	ldi	r24, 0x30	; 48
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 4be:	ba 94       	dec	r11
 4c0:	f7 cf       	rjmp	.-18     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4c2:	4a 94       	dec	r4
 4c4:	e1 e0       	ldi	r30, 0x01	; 1
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	ec 0f       	add	r30, r28
 4ca:	fd 1f       	adc	r31, r29
 4cc:	e4 0d       	add	r30, r4
 4ce:	f1 1d       	adc	r31, r1
 4d0:	80 81       	ld	r24, Z
 4d2:	b6 01       	movw	r22, r12
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 4da:	41 10       	cpse	r4, r1
 4dc:	f2 cf       	rjmp	.-28     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4de:	00 23       	and	r16, r16
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e2:	30 ce       	rjmp	.-928    	; 0x144 <vfprintf+0x5e>
 4e4:	b6 01       	movw	r22, r12
 4e6:	80 e2       	ldi	r24, 0x20	; 32
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 00 05 	call	0xa00	; 0xa00 <fputc>
 4ee:	01 50       	subi	r16, 0x01	; 1
 4f0:	f6 cf       	rjmp	.-20     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4f2:	f6 01       	movw	r30, r12
 4f4:	87 81       	ldd	r24, Z+7	; 0x07
 4f6:	90 85       	ldd	r25, Z+8	; 0x08
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	9f ef       	ldi	r25, 0xFF	; 255
 4fe:	62 96       	adiw	r28, 0x12	; 18
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	df 90       	pop	r13
 518:	cf 90       	pop	r12
 51a:	bf 90       	pop	r11
 51c:	af 90       	pop	r10
 51e:	9f 90       	pop	r9
 520:	8f 90       	pop	r8
 522:	7f 90       	pop	r7
 524:	6f 90       	pop	r6
 526:	4f 90       	pop	r4
 528:	3f 90       	pop	r3
 52a:	2f 90       	pop	r2
 52c:	08 95       	ret

Disassembly of section .text.avrlibc:

00000b76 <calloc>:
 b76:	0f 93       	push	r16
 b78:	1f 93       	push	r17
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	86 9f       	mul	r24, r22
 b80:	80 01       	movw	r16, r0
 b82:	87 9f       	mul	r24, r23
 b84:	10 0d       	add	r17, r0
 b86:	96 9f       	mul	r25, r22
 b88:	10 0d       	add	r17, r0
 b8a:	11 24       	eor	r1, r1
 b8c:	c8 01       	movw	r24, r16
 b8e:	0e 94 97 02 	call	0x52e	; 0x52e <malloc>
 b92:	ec 01       	movw	r28, r24
 b94:	00 97       	sbiw	r24, 0x00	; 0
 b96:	29 f0       	breq	.+10     	; 0xba2 <calloc+0x2c>
 b98:	a8 01       	movw	r20, r16
 b9a:	60 e0       	ldi	r22, 0x00	; 0
 b9c:	70 e0       	ldi	r23, 0x00	; 0
 b9e:	0e 94 85 06 	call	0xd0a	; 0xd0a <memset>
 ba2:	ce 01       	movw	r24, r28
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	1f 91       	pop	r17
 baa:	0f 91       	pop	r16
 bac:	08 95       	ret

Disassembly of section .text.avrlibc:

0000052e <malloc>:
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	82 30       	cpi	r24, 0x02	; 2
 538:	91 05       	cpc	r25, r1
 53a:	10 f4       	brcc	.+4      	; 0x540 <malloc+0x12>
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__flp>
 544:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__flp+0x1>
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	a0 e0       	ldi	r26, 0x00	; 0
 54e:	b0 e0       	ldi	r27, 0x00	; 0
 550:	30 97       	sbiw	r30, 0x00	; 0
 552:	19 f1       	breq	.+70     	; 0x59a <malloc+0x6c>
 554:	40 81       	ld	r20, Z
 556:	51 81       	ldd	r21, Z+1	; 0x01
 558:	02 81       	ldd	r16, Z+2	; 0x02
 55a:	13 81       	ldd	r17, Z+3	; 0x03
 55c:	48 17       	cp	r20, r24
 55e:	59 07       	cpc	r21, r25
 560:	c8 f0       	brcs	.+50     	; 0x594 <malloc+0x66>
 562:	84 17       	cp	r24, r20
 564:	95 07       	cpc	r25, r21
 566:	69 f4       	brne	.+26     	; 0x582 <malloc+0x54>
 568:	10 97       	sbiw	r26, 0x00	; 0
 56a:	31 f0       	breq	.+12     	; 0x578 <malloc+0x4a>
 56c:	12 96       	adiw	r26, 0x02	; 2
 56e:	0c 93       	st	X, r16
 570:	12 97       	sbiw	r26, 0x02	; 2
 572:	13 96       	adiw	r26, 0x03	; 3
 574:	1c 93       	st	X, r17
 576:	27 c0       	rjmp	.+78     	; 0x5c6 <malloc+0x98>
 578:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__flp>
 57c:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <__flp+0x1>
 580:	22 c0       	rjmp	.+68     	; 0x5c6 <malloc+0x98>
 582:	21 15       	cp	r18, r1
 584:	31 05       	cpc	r19, r1
 586:	19 f0       	breq	.+6      	; 0x58e <malloc+0x60>
 588:	42 17       	cp	r20, r18
 58a:	53 07       	cpc	r21, r19
 58c:	18 f4       	brcc	.+6      	; 0x594 <malloc+0x66>
 58e:	9a 01       	movw	r18, r20
 590:	bd 01       	movw	r22, r26
 592:	ef 01       	movw	r28, r30
 594:	df 01       	movw	r26, r30
 596:	f8 01       	movw	r30, r16
 598:	db cf       	rjmp	.-74     	; 0x550 <malloc+0x22>
 59a:	21 15       	cp	r18, r1
 59c:	31 05       	cpc	r19, r1
 59e:	f9 f0       	breq	.+62     	; 0x5de <malloc+0xb0>
 5a0:	28 1b       	sub	r18, r24
 5a2:	39 0b       	sbc	r19, r25
 5a4:	24 30       	cpi	r18, 0x04	; 4
 5a6:	31 05       	cpc	r19, r1
 5a8:	80 f4       	brcc	.+32     	; 0x5ca <malloc+0x9c>
 5aa:	8a 81       	ldd	r24, Y+2	; 0x02
 5ac:	9b 81       	ldd	r25, Y+3	; 0x03
 5ae:	61 15       	cp	r22, r1
 5b0:	71 05       	cpc	r23, r1
 5b2:	21 f0       	breq	.+8      	; 0x5bc <malloc+0x8e>
 5b4:	fb 01       	movw	r30, r22
 5b6:	93 83       	std	Z+3, r25	; 0x03
 5b8:	82 83       	std	Z+2, r24	; 0x02
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <malloc+0x96>
 5bc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__flp+0x1>
 5c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__flp>
 5c4:	fe 01       	movw	r30, r28
 5c6:	32 96       	adiw	r30, 0x02	; 2
 5c8:	44 c0       	rjmp	.+136    	; 0x652 <malloc+0x124>
 5ca:	fe 01       	movw	r30, r28
 5cc:	e2 0f       	add	r30, r18
 5ce:	f3 1f       	adc	r31, r19
 5d0:	81 93       	st	Z+, r24
 5d2:	91 93       	st	Z+, r25
 5d4:	22 50       	subi	r18, 0x02	; 2
 5d6:	31 09       	sbc	r19, r1
 5d8:	39 83       	std	Y+1, r19	; 0x01
 5da:	28 83       	st	Y, r18
 5dc:	3a c0       	rjmp	.+116    	; 0x652 <malloc+0x124>
 5de:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__brkval>
 5e2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__brkval+0x1>
 5e6:	23 2b       	or	r18, r19
 5e8:	41 f4       	brne	.+16     	; 0x5fa <malloc+0xcc>
 5ea:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
 5ee:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
 5f2:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__brkval+0x1>
 5f6:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__brkval>
 5fa:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <_end>
 5fe:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <_end+0x1>
 602:	21 15       	cp	r18, r1
 604:	31 05       	cpc	r19, r1
 606:	41 f4       	brne	.+16     	; 0x618 <malloc+0xea>
 608:	2d b7       	in	r18, 0x3d	; 61
 60a:	3e b7       	in	r19, 0x3e	; 62
 60c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
 610:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
 614:	24 1b       	sub	r18, r20
 616:	35 0b       	sbc	r19, r21
 618:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__brkval>
 61c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__brkval+0x1>
 620:	e2 17       	cp	r30, r18
 622:	f3 07       	cpc	r31, r19
 624:	a0 f4       	brcc	.+40     	; 0x64e <malloc+0x120>
 626:	2e 1b       	sub	r18, r30
 628:	3f 0b       	sbc	r19, r31
 62a:	28 17       	cp	r18, r24
 62c:	39 07       	cpc	r19, r25
 62e:	78 f0       	brcs	.+30     	; 0x64e <malloc+0x120>
 630:	ac 01       	movw	r20, r24
 632:	4e 5f       	subi	r20, 0xFE	; 254
 634:	5f 4f       	sbci	r21, 0xFF	; 255
 636:	24 17       	cp	r18, r20
 638:	35 07       	cpc	r19, r21
 63a:	48 f0       	brcs	.+18     	; 0x64e <malloc+0x120>
 63c:	4e 0f       	add	r20, r30
 63e:	5f 1f       	adc	r21, r31
 640:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__brkval+0x1>
 644:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__brkval>
 648:	81 93       	st	Z+, r24
 64a:	91 93       	st	Z+, r25
 64c:	02 c0       	rjmp	.+4      	; 0x652 <malloc+0x124>
 64e:	e0 e0       	ldi	r30, 0x00	; 0
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	cf 01       	movw	r24, r30
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	08 95       	ret

0000065e <free>:
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	00 97       	sbiw	r24, 0x00	; 0
 664:	09 f4       	brne	.+2      	; 0x668 <free+0xa>
 666:	81 c0       	rjmp	.+258    	; 0x76a <free+0x10c>
 668:	fc 01       	movw	r30, r24
 66a:	32 97       	sbiw	r30, 0x02	; 2
 66c:	13 82       	std	Z+3, r1	; 0x03
 66e:	12 82       	std	Z+2, r1	; 0x02
 670:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__flp>
 674:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__flp+0x1>
 678:	10 97       	sbiw	r26, 0x00	; 0
 67a:	81 f4       	brne	.+32     	; 0x69c <free+0x3e>
 67c:	20 81       	ld	r18, Z
 67e:	31 81       	ldd	r19, Z+1	; 0x01
 680:	82 0f       	add	r24, r18
 682:	93 1f       	adc	r25, r19
 684:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__brkval>
 688:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__brkval+0x1>
 68c:	28 17       	cp	r18, r24
 68e:	39 07       	cpc	r19, r25
 690:	51 f5       	brne	.+84     	; 0x6e6 <free+0x88>
 692:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__brkval+0x1>
 696:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__brkval>
 69a:	67 c0       	rjmp	.+206    	; 0x76a <free+0x10c>
 69c:	ed 01       	movw	r28, r26
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	ce 17       	cp	r28, r30
 6a4:	df 07       	cpc	r29, r31
 6a6:	40 f4       	brcc	.+16     	; 0x6b8 <free+0x5a>
 6a8:	4a 81       	ldd	r20, Y+2	; 0x02
 6aa:	5b 81       	ldd	r21, Y+3	; 0x03
 6ac:	9e 01       	movw	r18, r28
 6ae:	41 15       	cp	r20, r1
 6b0:	51 05       	cpc	r21, r1
 6b2:	f1 f0       	breq	.+60     	; 0x6f0 <free+0x92>
 6b4:	ea 01       	movw	r28, r20
 6b6:	f5 cf       	rjmp	.-22     	; 0x6a2 <free+0x44>
 6b8:	d3 83       	std	Z+3, r29	; 0x03
 6ba:	c2 83       	std	Z+2, r28	; 0x02
 6bc:	40 81       	ld	r20, Z
 6be:	51 81       	ldd	r21, Z+1	; 0x01
 6c0:	84 0f       	add	r24, r20
 6c2:	95 1f       	adc	r25, r21
 6c4:	c8 17       	cp	r28, r24
 6c6:	d9 07       	cpc	r29, r25
 6c8:	59 f4       	brne	.+22     	; 0x6e0 <free+0x82>
 6ca:	88 81       	ld	r24, Y
 6cc:	99 81       	ldd	r25, Y+1	; 0x01
 6ce:	84 0f       	add	r24, r20
 6d0:	95 1f       	adc	r25, r21
 6d2:	02 96       	adiw	r24, 0x02	; 2
 6d4:	91 83       	std	Z+1, r25	; 0x01
 6d6:	80 83       	st	Z, r24
 6d8:	8a 81       	ldd	r24, Y+2	; 0x02
 6da:	9b 81       	ldd	r25, Y+3	; 0x03
 6dc:	93 83       	std	Z+3, r25	; 0x03
 6de:	82 83       	std	Z+2, r24	; 0x02
 6e0:	21 15       	cp	r18, r1
 6e2:	31 05       	cpc	r19, r1
 6e4:	29 f4       	brne	.+10     	; 0x6f0 <free+0x92>
 6e6:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__flp+0x1>
 6ea:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__flp>
 6ee:	3d c0       	rjmp	.+122    	; 0x76a <free+0x10c>
 6f0:	e9 01       	movw	r28, r18
 6f2:	fb 83       	std	Y+3, r31	; 0x03
 6f4:	ea 83       	std	Y+2, r30	; 0x02
 6f6:	49 91       	ld	r20, Y+
 6f8:	59 91       	ld	r21, Y+
 6fa:	c4 0f       	add	r28, r20
 6fc:	d5 1f       	adc	r29, r21
 6fe:	ec 17       	cp	r30, r28
 700:	fd 07       	cpc	r31, r29
 702:	61 f4       	brne	.+24     	; 0x71c <free+0xbe>
 704:	80 81       	ld	r24, Z
 706:	91 81       	ldd	r25, Z+1	; 0x01
 708:	84 0f       	add	r24, r20
 70a:	95 1f       	adc	r25, r21
 70c:	02 96       	adiw	r24, 0x02	; 2
 70e:	e9 01       	movw	r28, r18
 710:	99 83       	std	Y+1, r25	; 0x01
 712:	88 83       	st	Y, r24
 714:	82 81       	ldd	r24, Z+2	; 0x02
 716:	93 81       	ldd	r25, Z+3	; 0x03
 718:	9b 83       	std	Y+3, r25	; 0x03
 71a:	8a 83       	std	Y+2, r24	; 0x02
 71c:	e0 e0       	ldi	r30, 0x00	; 0
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	12 96       	adiw	r26, 0x02	; 2
 722:	8d 91       	ld	r24, X+
 724:	9c 91       	ld	r25, X
 726:	13 97       	sbiw	r26, 0x03	; 3
 728:	00 97       	sbiw	r24, 0x00	; 0
 72a:	19 f0       	breq	.+6      	; 0x732 <free+0xd4>
 72c:	fd 01       	movw	r30, r26
 72e:	dc 01       	movw	r26, r24
 730:	f7 cf       	rjmp	.-18     	; 0x720 <free+0xc2>
 732:	8d 91       	ld	r24, X+
 734:	9c 91       	ld	r25, X
 736:	11 97       	sbiw	r26, 0x01	; 1
 738:	9d 01       	movw	r18, r26
 73a:	2e 5f       	subi	r18, 0xFE	; 254
 73c:	3f 4f       	sbci	r19, 0xFF	; 255
 73e:	82 0f       	add	r24, r18
 740:	93 1f       	adc	r25, r19
 742:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__brkval>
 746:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__brkval+0x1>
 74a:	28 17       	cp	r18, r24
 74c:	39 07       	cpc	r19, r25
 74e:	69 f4       	brne	.+26     	; 0x76a <free+0x10c>
 750:	30 97       	sbiw	r30, 0x00	; 0
 752:	29 f4       	brne	.+10     	; 0x75e <free+0x100>
 754:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__flp+0x1>
 758:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__flp>
 75c:	02 c0       	rjmp	.+4      	; 0x762 <free+0x104>
 75e:	13 82       	std	Z+3, r1	; 0x03
 760:	12 82       	std	Z+2, r1	; 0x02
 762:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__brkval+0x1>
 766:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__brkval>
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	08 95       	ret

Disassembly of section .text.avrlibc:

00000be6 <strnlen>:
 be6:	cf 92       	push	r12
 be8:	df 92       	push	r13
 bea:	ef 92       	push	r14
 bec:	6b 01       	movw	r12, r22
 bee:	e8 2e       	mov	r14, r24
 bf0:	a8 2f       	mov	r26, r24
 bf2:	cb 01       	movw	r24, r22
 bf4:	41 15       	cp	r20, r1
 bf6:	51 05       	cpc	r21, r1
 bf8:	31 f4       	brne	.+12     	; 0xc06 <strnlen+0x20>
 bfa:	8c 19       	sub	r24, r12
 bfc:	9d 09       	sbc	r25, r13
 bfe:	ef 90       	pop	r14
 c00:	df 90       	pop	r13
 c02:	cf 90       	pop	r12
 c04:	08 95       	ret
 c06:	fc 01       	movw	r30, r24
 c08:	24 91       	lpm	r18, Z
 c0a:	a7 fd       	sbrc	r26, 7
 c0c:	20 81       	ld	r18, Z
 c0e:	22 23       	and	r18, r18
 c10:	a1 f3       	breq	.-24     	; 0xbfa <strnlen+0x14>
 c12:	01 96       	adiw	r24, 0x01	; 1
 c14:	a1 1d       	adc	r26, r1
 c16:	41 50       	subi	r20, 0x01	; 1
 c18:	51 09       	sbc	r21, r1
 c1a:	ec cf       	rjmp	.-40     	; 0xbf4 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00000d0a <memset>:
 d0a:	dc 01       	movw	r26, r24
 d0c:	01 c0       	rjmp	.+2      	; 0xd10 <memset+0x6>
 d0e:	6d 93       	st	X+, r22
 d10:	41 50       	subi	r20, 0x01	; 1
 d12:	50 40       	sbci	r21, 0x00	; 0
 d14:	e0 f7       	brcc	.-8      	; 0xd0e <memset+0x4>
 d16:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a00 <fputc>:
 a00:	0f 93       	push	r16
 a02:	1f 93       	push	r17
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	fb 01       	movw	r30, r22
 a0a:	24 81       	ldd	r18, Z+4	; 0x04
 a0c:	21 fd       	sbrc	r18, 1
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <fputc+0x16>
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	2c c0       	rjmp	.+88     	; 0xa6e <fputc+0x6e>
 a16:	22 ff       	sbrs	r18, 2
 a18:	16 c0       	rjmp	.+44     	; 0xa46 <fputc+0x46>
 a1a:	47 81       	ldd	r20, Z+7	; 0x07
 a1c:	50 85       	ldd	r21, Z+8	; 0x08
 a1e:	25 81       	ldd	r18, Z+5	; 0x05
 a20:	36 81       	ldd	r19, Z+6	; 0x06
 a22:	42 17       	cp	r20, r18
 a24:	53 07       	cpc	r21, r19
 a26:	44 f4       	brge	.+16     	; 0xa38 <fputc+0x38>
 a28:	a0 81       	ld	r26, Z
 a2a:	b1 81       	ldd	r27, Z+1	; 0x01
 a2c:	9d 01       	movw	r18, r26
 a2e:	2f 5f       	subi	r18, 0xFF	; 255
 a30:	3f 4f       	sbci	r19, 0xFF	; 255
 a32:	31 83       	std	Z+1, r19	; 0x01
 a34:	20 83       	st	Z, r18
 a36:	8c 93       	st	X, r24
 a38:	27 81       	ldd	r18, Z+7	; 0x07
 a3a:	30 85       	ldd	r19, Z+8	; 0x08
 a3c:	2f 5f       	subi	r18, 0xFF	; 255
 a3e:	3f 4f       	sbci	r19, 0xFF	; 255
 a40:	30 87       	std	Z+8, r19	; 0x08
 a42:	27 83       	std	Z+7, r18	; 0x07
 a44:	14 c0       	rjmp	.+40     	; 0xa6e <fputc+0x6e>
 a46:	8b 01       	movw	r16, r22
 a48:	ec 01       	movw	r28, r24
 a4a:	fb 01       	movw	r30, r22
 a4c:	01 84       	ldd	r0, Z+9	; 0x09
 a4e:	f2 85       	ldd	r31, Z+10	; 0x0a
 a50:	e0 2d       	mov	r30, r0
 a52:	09 95       	icall
 a54:	89 2b       	or	r24, r25
 a56:	e1 f6       	brne	.-72     	; 0xa10 <fputc+0x10>
 a58:	d8 01       	movw	r26, r16
 a5a:	17 96       	adiw	r26, 0x07	; 7
 a5c:	8d 91       	ld	r24, X+
 a5e:	9c 91       	ld	r25, X
 a60:	18 97       	sbiw	r26, 0x08	; 8
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	18 96       	adiw	r26, 0x08	; 8
 a66:	9c 93       	st	X, r25
 a68:	8e 93       	st	-X, r24
 a6a:	17 97       	sbiw	r26, 0x07	; 7
 a6c:	ce 01       	movw	r24, r28
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	08 95       	ret

Disassembly of section .text.avrlibc:

00000770 <__ultoa_invert>:
 770:	fa 01       	movw	r30, r20
 772:	aa 27       	eor	r26, r26
 774:	28 30       	cpi	r18, 0x08	; 8
 776:	51 f1       	breq	.+84     	; 0x7cc <__ultoa_invert+0x5c>
 778:	20 31       	cpi	r18, 0x10	; 16
 77a:	81 f1       	breq	.+96     	; 0x7dc <__ultoa_invert+0x6c>
 77c:	e8 94       	clt
 77e:	6f 93       	push	r22
 780:	6e 7f       	andi	r22, 0xFE	; 254
 782:	6e 5f       	subi	r22, 0xFE	; 254
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	af 4f       	sbci	r26, 0xFF	; 255
 78c:	b1 e0       	ldi	r27, 0x01	; 1
 78e:	3e d0       	rcall	.+124    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 790:	b4 e0       	ldi	r27, 0x04	; 4
 792:	3c d0       	rcall	.+120    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 794:	67 0f       	add	r22, r23
 796:	78 1f       	adc	r23, r24
 798:	89 1f       	adc	r24, r25
 79a:	9a 1f       	adc	r25, r26
 79c:	a1 1d       	adc	r26, r1
 79e:	68 0f       	add	r22, r24
 7a0:	79 1f       	adc	r23, r25
 7a2:	8a 1f       	adc	r24, r26
 7a4:	91 1d       	adc	r25, r1
 7a6:	a1 1d       	adc	r26, r1
 7a8:	6a 0f       	add	r22, r26
 7aa:	71 1d       	adc	r23, r1
 7ac:	81 1d       	adc	r24, r1
 7ae:	91 1d       	adc	r25, r1
 7b0:	a1 1d       	adc	r26, r1
 7b2:	20 d0       	rcall	.+64     	; 0x7f4 <__ultoa_invert+0x84>
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <__ultoa_invert+0x48>
 7b6:	68 94       	set
 7b8:	3f 91       	pop	r19
 7ba:	2a e0       	ldi	r18, 0x0A	; 10
 7bc:	26 9f       	mul	r18, r22
 7be:	11 24       	eor	r1, r1
 7c0:	30 19       	sub	r19, r0
 7c2:	30 5d       	subi	r19, 0xD0	; 208
 7c4:	31 93       	st	Z+, r19
 7c6:	de f6       	brtc	.-74     	; 0x77e <__ultoa_invert+0xe>
 7c8:	cf 01       	movw	r24, r30
 7ca:	08 95       	ret
 7cc:	46 2f       	mov	r20, r22
 7ce:	47 70       	andi	r20, 0x07	; 7
 7d0:	40 5d       	subi	r20, 0xD0	; 208
 7d2:	41 93       	st	Z+, r20
 7d4:	b3 e0       	ldi	r27, 0x03	; 3
 7d6:	0f d0       	rcall	.+30     	; 0x7f6 <__ultoa_invert+0x86>
 7d8:	c9 f7       	brne	.-14     	; 0x7cc <__ultoa_invert+0x5c>
 7da:	f6 cf       	rjmp	.-20     	; 0x7c8 <__ultoa_invert+0x58>
 7dc:	46 2f       	mov	r20, r22
 7de:	4f 70       	andi	r20, 0x0F	; 15
 7e0:	40 5d       	subi	r20, 0xD0	; 208
 7e2:	4a 33       	cpi	r20, 0x3A	; 58
 7e4:	18 f0       	brcs	.+6      	; 0x7ec <__ultoa_invert+0x7c>
 7e6:	49 5d       	subi	r20, 0xD9	; 217
 7e8:	31 fd       	sbrc	r19, 1
 7ea:	40 52       	subi	r20, 0x20	; 32
 7ec:	41 93       	st	Z+, r20
 7ee:	02 d0       	rcall	.+4      	; 0x7f4 <__ultoa_invert+0x84>
 7f0:	a9 f7       	brne	.-22     	; 0x7dc <__ultoa_invert+0x6c>
 7f2:	ea cf       	rjmp	.-44     	; 0x7c8 <__ultoa_invert+0x58>
 7f4:	b4 e0       	ldi	r27, 0x04	; 4
 7f6:	a6 95       	lsr	r26
 7f8:	97 95       	ror	r25
 7fa:	87 95       	ror	r24
 7fc:	77 95       	ror	r23
 7fe:	67 95       	ror	r22
 800:	ba 95       	dec	r27
 802:	c9 f7       	brne	.-14     	; 0x7f6 <__ultoa_invert+0x86>
 804:	00 97       	sbiw	r24, 0x00	; 0
 806:	61 05       	cpc	r22, r1
 808:	71 05       	cpc	r23, r1
 80a:	08 95       	ret
 80c:	9b 01       	movw	r18, r22
 80e:	ac 01       	movw	r20, r24
 810:	0a 2e       	mov	r0, r26
 812:	06 94       	lsr	r0
 814:	57 95       	ror	r21
 816:	47 95       	ror	r20
 818:	37 95       	ror	r19
 81a:	27 95       	ror	r18
 81c:	ba 95       	dec	r27
 81e:	c9 f7       	brne	.-14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 820:	62 0f       	add	r22, r18
 822:	73 1f       	adc	r23, r19
 824:	84 1f       	adc	r24, r20
 826:	95 1f       	adc	r25, r21
 828:	a0 1d       	adc	r26, r0
 82a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000bae <__prologue_saves__>:
 bae:	2f 92       	push	r2
 bb0:	3f 92       	push	r3
 bb2:	4f 92       	push	r4
 bb4:	5f 92       	push	r5
 bb6:	6f 92       	push	r6
 bb8:	7f 92       	push	r7
 bba:	8f 92       	push	r8
 bbc:	9f 92       	push	r9
 bbe:	af 92       	push	r10
 bc0:	bf 92       	push	r11
 bc2:	cf 92       	push	r12
 bc4:	df 92       	push	r13
 bc6:	ef 92       	push	r14
 bc8:	ff 92       	push	r15
 bca:	0f 93       	push	r16
 bcc:	1f 93       	push	r17
 bce:	cf 93       	push	r28
 bd0:	df 93       	push	r29
 bd2:	cd b7       	in	r28, 0x3d	; 61
 bd4:	de b7       	in	r29, 0x3e	; 62
 bd6:	ca 1b       	sub	r28, r26
 bd8:	db 0b       	sbc	r29, r27
 bda:	0f b6       	in	r0, 0x3f	; 63
 bdc:	f8 94       	cli
 bde:	de bf       	out	0x3e, r29	; 62
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	cd bf       	out	0x3d, r28	; 61
 be4:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000c1c <__epilogue_restores__>:
 c1c:	2a 88       	ldd	r2, Y+18	; 0x12
 c1e:	39 88       	ldd	r3, Y+17	; 0x11
 c20:	48 88       	ldd	r4, Y+16	; 0x10
 c22:	5f 84       	ldd	r5, Y+15	; 0x0f
 c24:	6e 84       	ldd	r6, Y+14	; 0x0e
 c26:	7d 84       	ldd	r7, Y+13	; 0x0d
 c28:	8c 84       	ldd	r8, Y+12	; 0x0c
 c2a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c2c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c2e:	b9 84       	ldd	r11, Y+9	; 0x09
 c30:	c8 84       	ldd	r12, Y+8	; 0x08
 c32:	df 80       	ldd	r13, Y+7	; 0x07
 c34:	ee 80       	ldd	r14, Y+6	; 0x06
 c36:	fd 80       	ldd	r15, Y+5	; 0x05
 c38:	0c 81       	ldd	r16, Y+4	; 0x04
 c3a:	1b 81       	ldd	r17, Y+3	; 0x03
 c3c:	aa 81       	ldd	r26, Y+2	; 0x02
 c3e:	b9 81       	ldd	r27, Y+1	; 0x01
 c40:	ce 0f       	add	r28, r30
 c42:	d1 1d       	adc	r29, r1
 c44:	0f b6       	in	r0, 0x3f	; 63
 c46:	f8 94       	cli
 c48:	de bf       	out	0x3e, r29	; 62
 c4a:	0f be       	out	0x3f, r0	; 63
 c4c:	cd bf       	out	0x3d, r28	; 61
 c4e:	ed 01       	movw	r28, r26
 c50:	08 95       	ret
